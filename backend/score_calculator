import math
import unittest

# Calculate the score of a dart bases on its detected position on the dartboard
def calculate_dart_score(dartboard, dart, bull =None):

    # Calculate dartboard center and radius
    cx = (dartboard["xmin"] + dartboard["xmax"]) / 2
    cy = (dartboard["ymin"] + dartboard["ymax"]) / 2

    radius =(dartboard["xmax"] - dartboard["xmin"]) / 2 # Approx. radius for now
   
    # Dart position(center of bounding box) -> Current logic / will be changed when model improves
    dx = (dart["xmin"] + dart["xmax"]) / 2
    dy = (dart["ymin"] + dart["ymax"]) / 2

    # Calculate distance from dartboard center
    distance = math.sqrt((dx- cx)**2 + (dy - cy)**2)

    #Calculate angle to determine which sector the dart is in
    angle = math.degrees(math.atan2(dy - cy, dx - cx))
    angle= (angle + 360) % 360 # Normalize angle 

    # Dartboard numbering order (clockwise from 20)
    dartboard_numbers = [20, 1, 18, 4, 13, 6, 10, 15, 2, 17, 3, 19, 7, 16, 8, 11, 14, 9, 12, 5]

    # Determine segment (each being 18 degrees)
    segment_index = int(angle + 9 // 18) % 20 # 20 segments in total
    base_score = dartboard_numbers[segment_index]
 
    # Check for bullseye first (checking for bull first due to the way the model is trained)
    if bull:
        if dart["xmin"] >= bull["xmin"] and dart["xmax"] <= bull["xmax"] and dart["ymin"] >= bull["ymin"] and dart["ymax"] <= bull["ymax"]:
            return 50 # Bullseye
        
    return  base_score# Now returning base score


